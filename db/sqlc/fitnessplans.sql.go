// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: fitnessplans.sql

package db

import (
	"context"
)

const addDayPlan = `-- name: AddDayPlan :one
INSERT INTO day_plans (user_id, plan_id, day)
VALUES ($1, $2, $3)
RETURNING day_plan_id, user_id, plan_id, day
`

type AddDayPlanParams struct {
	UserID int64 `json:"user_id"`
	PlanID int64 `json:"plan_id"`
	Day    int32 `json:"day"`
}

func (q *Queries) AddDayPlan(ctx context.Context, arg AddDayPlanParams) (DayPlan, error) {
	row := q.db.QueryRowContext(ctx, addDayPlan, arg.UserID, arg.PlanID, arg.Day)
	var i DayPlan
	err := row.Scan(
		&i.DayPlanID,
		&i.UserID,
		&i.PlanID,
		&i.Day,
	)
	return i, err
}

const addDayPlanMoves = `-- name: AddDayPlanMoves :exec
INSERT INTO day_plan_moves (
        user_id,
        plan_id,
        day_plan_id,
        move_id
    )
VALUES ($1, $2, $3, $4)
`

type AddDayPlanMovesParams struct {
	UserID    int64 `json:"user_id"`
	PlanID    int64 `json:"plan_id"`
	DayPlanID int64 `json:"day_plan_id"`
	MoveID    int64 `json:"move_id"`
}

func (q *Queries) AddDayPlanMoves(ctx context.Context, arg AddDayPlanMovesParams) error {
	_, err := q.db.ExecContext(ctx, addDayPlanMoves,
		arg.UserID,
		arg.PlanID,
		arg.DayPlanID,
		arg.MoveID,
	)
	return err
}

const addPlan = `-- name: AddPlan :one
INSERT INTO plans (user_id, plan_name, days)
VALUES ($1, $2, $3)
RETURNING plan_id
`

type AddPlanParams struct {
	UserID   int64  `json:"user_id"`
	PlanName string `json:"plan_name"`
	Days     int32  `json:"days"`
}

func (q *Queries) AddPlan(ctx context.Context, arg AddPlanParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addPlan, arg.UserID, arg.PlanName, arg.Days)
	var plan_id int64
	err := row.Scan(&plan_id)
	return plan_id, err
}

const addPlanRecord = `-- name: AddPlanRecord :exec
INSERT INTO plan_records (
        user_id,
        day_plan_id,
        day_plan_move_id,
        move_id,
        week,
        set_record,
        reps,
        weight
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8
    )
`

type AddPlanRecordParams struct {
	UserID        int64 `json:"user_id"`
	DayPlanID     int64 `json:"day_plan_id"`
	DayPlanMoveID int64 `json:"day_plan_move_id"`
	MoveID        int64 `json:"move_id"`
	Week          int32 `json:"week"`
	SetRecord     int32 `json:"set_record"`
	Reps          int32 `json:"reps"`
	Weight        int32 `json:"weight"`
}

func (q *Queries) AddPlanRecord(ctx context.Context, arg AddPlanRecordParams) error {
	_, err := q.db.ExecContext(ctx, addPlanRecord,
		arg.UserID,
		arg.DayPlanID,
		arg.DayPlanMoveID,
		arg.MoveID,
		arg.Week,
		arg.SetRecord,
		arg.Reps,
		arg.Weight,
	)
	return err
}

const countFitnessDayPlanMoves = `-- name: CountFitnessDayPlanMoves :one
SELECT COUNT(day_plan_move_id)
FROM day_plan_moves
WHERE user_id = $1
    AND day_plan_id = $2
`

type CountFitnessDayPlanMovesParams struct {
	UserID    int64 `json:"user_id"`
	DayPlanID int64 `json:"day_plan_id"`
}

func (q *Queries) CountFitnessDayPlanMoves(ctx context.Context, arg CountFitnessDayPlanMovesParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFitnessDayPlanMoves, arg.UserID, arg.DayPlanID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFitnessPlans = `-- name: CountFitnessPlans :one
SELECT COUNT(plan_id)
FROM plans
WHERE user_id = $1
`

func (q *Queries) CountFitnessPlans(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFitnessPlans, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteFitnessDayPlan = `-- name: DeleteFitnessDayPlan :exec
DELETE FROM day_plans
WHERE user_id = $1
    AND day_plan_id = $2
`

type DeleteFitnessDayPlanParams struct {
	UserID    int64 `json:"user_id"`
	DayPlanID int64 `json:"day_plan_id"`
}

func (q *Queries) DeleteFitnessDayPlan(ctx context.Context, arg DeleteFitnessDayPlanParams) error {
	_, err := q.db.ExecContext(ctx, deleteFitnessDayPlan, arg.UserID, arg.DayPlanID)
	return err
}

const deleteFitnessDayPlanMove = `-- name: DeleteFitnessDayPlanMove :one
DELETE FROM day_plan_moves
WHERE user_id = $1
    AND day_plan_move_id = $2
RETURNING day_plan_move_id, user_id, plan_id, day_plan_id, move_id
`

type DeleteFitnessDayPlanMoveParams struct {
	UserID        int64 `json:"user_id"`
	DayPlanMoveID int64 `json:"day_plan_move_id"`
}

func (q *Queries) DeleteFitnessDayPlanMove(ctx context.Context, arg DeleteFitnessDayPlanMoveParams) (DayPlanMove, error) {
	row := q.db.QueryRowContext(ctx, deleteFitnessDayPlanMove, arg.UserID, arg.DayPlanMoveID)
	var i DayPlanMove
	err := row.Scan(
		&i.DayPlanMoveID,
		&i.UserID,
		&i.PlanID,
		&i.DayPlanID,
		&i.MoveID,
	)
	return i, err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM plans
WHERE user_id = $1
    AND plan_id = $2
`

type DeletePlanParams struct {
	UserID int64 `json:"user_id"`
	PlanID int64 `json:"plan_id"`
}

func (q *Queries) DeletePlan(ctx context.Context, arg DeletePlanParams) error {
	_, err := q.db.ExecContext(ctx, deletePlan, arg.UserID, arg.PlanID)
	return err
}

const deletePlanRecord = `-- name: DeletePlanRecord :exec
DELETE FROM plan_records
WHERE user_id = $1
    AND plan_record_id = $2
`

type DeletePlanRecordParams struct {
	UserID       int64 `json:"user_id"`
	PlanRecordID int64 `json:"plan_record_id"`
}

func (q *Queries) DeletePlanRecord(ctx context.Context, arg DeletePlanRecordParams) error {
	_, err := q.db.ExecContext(ctx, deletePlanRecord, arg.UserID, arg.PlanRecordID)
	return err
}

const deleteWeekPlanRecords = `-- name: DeleteWeekPlanRecords :exec
DELETE FROM plan_records
WHERE user_id = $1
    AND week = $2
`

type DeleteWeekPlanRecordsParams struct {
	UserID int64 `json:"user_id"`
	Week   int32 `json:"week"`
}

func (q *Queries) DeleteWeekPlanRecords(ctx context.Context, arg DeleteWeekPlanRecordsParams) error {
	_, err := q.db.ExecContext(ctx, deleteWeekPlanRecords, arg.UserID, arg.Week)
	return err
}

const fetchFitnessDayPlanMoves = `-- name: FetchFitnessDayPlanMoves :many
SELECT day_plan_move_id, user_id, plan_id, day_plan_id, move_id
FROM day_plan_moves
WHERE user_id = $1
    AND day_plan_id = $2
`

type FetchFitnessDayPlanMovesParams struct {
	UserID    int64 `json:"user_id"`
	DayPlanID int64 `json:"day_plan_id"`
}

func (q *Queries) FetchFitnessDayPlanMoves(ctx context.Context, arg FetchFitnessDayPlanMovesParams) ([]DayPlanMove, error) {
	rows, err := q.db.QueryContext(ctx, fetchFitnessDayPlanMoves, arg.UserID, arg.DayPlanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DayPlanMove{}
	for rows.Next() {
		var i DayPlanMove
		if err := rows.Scan(
			&i.DayPlanMoveID,
			&i.UserID,
			&i.PlanID,
			&i.DayPlanID,
			&i.MoveID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchFitnessDayPlans = `-- name: FetchFitnessDayPlans :many
SELECT day_plan_id, user_id, plan_id, day
FROM day_plans
WHERE user_id = $1
    AND plan_id = $2
`

type FetchFitnessDayPlansParams struct {
	UserID int64 `json:"user_id"`
	PlanID int64 `json:"plan_id"`
}

func (q *Queries) FetchFitnessDayPlans(ctx context.Context, arg FetchFitnessDayPlansParams) ([]DayPlan, error) {
	rows, err := q.db.QueryContext(ctx, fetchFitnessDayPlans, arg.UserID, arg.PlanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DayPlan{}
	for rows.Next() {
		var i DayPlan
		if err := rows.Scan(
			&i.DayPlanID,
			&i.UserID,
			&i.PlanID,
			&i.Day,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchFitnessPlans = `-- name: FetchFitnessPlans :many
SELECT plan_id,
    plan_name,
    days
FROM plans
WHERE user_id = $1
ORDER BY created_at DESC
`

type FetchFitnessPlansRow struct {
	PlanID   int64  `json:"plan_id"`
	PlanName string `json:"plan_name"`
	Days     int32  `json:"days"`
}

func (q *Queries) FetchFitnessPlans(ctx context.Context, userID int64) ([]FetchFitnessPlansRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchFitnessPlans, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FetchFitnessPlansRow{}
	for rows.Next() {
		var i FetchFitnessPlansRow
		if err := rows.Scan(&i.PlanID, &i.PlanName, &i.Days); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchSingleFitnessPlan = `-- name: FetchSingleFitnessPlan :one
SELECT plan_id,
    plan_name,
    days
FROM plans
WHERE user_id = $1
    AND plan_id = $2
`

type FetchSingleFitnessPlanParams struct {
	UserID int64 `json:"user_id"`
	PlanID int64 `json:"plan_id"`
}

type FetchSingleFitnessPlanRow struct {
	PlanID   int64  `json:"plan_id"`
	PlanName string `json:"plan_name"`
	Days     int32  `json:"days"`
}

func (q *Queries) FetchSingleFitnessPlan(ctx context.Context, arg FetchSingleFitnessPlanParams) (FetchSingleFitnessPlanRow, error) {
	row := q.db.QueryRowContext(ctx, fetchSingleFitnessPlan, arg.UserID, arg.PlanID)
	var i FetchSingleFitnessPlanRow
	err := row.Scan(&i.PlanID, &i.PlanName, &i.Days)
	return i, err
}

const joinDayPlanAndDayPlanMovesAndMoves = `-- name: JoinDayPlanAndDayPlanMovesAndMoves :many
SELECT day_plan_moves.day_plan_move_id,
    day_plan_moves.day_plan_id,
    day_plan_moves.plan_id,
    day,
    day_plan_moves.move_id,
    move_name
FROM day_plan_moves
    INNER JOIN day_plans ON day_plan_moves.day_plan_id = day_plans.day_plan_id
    INNER JOIN moves ON day_plan_moves.move_id = moves.move_id
WHERE day_plan_moves.user_id = $1
    AND day_plan_moves.plan_id = $2
ORDER BY day
`

type JoinDayPlanAndDayPlanMovesAndMovesParams struct {
	UserID int64 `json:"user_id"`
	PlanID int64 `json:"plan_id"`
}

type JoinDayPlanAndDayPlanMovesAndMovesRow struct {
	DayPlanMoveID int64  `json:"day_plan_move_id"`
	DayPlanID     int64  `json:"day_plan_id"`
	PlanID        int64  `json:"plan_id"`
	Day           int32  `json:"day"`
	MoveID        int64  `json:"move_id"`
	MoveName      string `json:"move_name"`
}

func (q *Queries) JoinDayPlanAndDayPlanMovesAndMoves(ctx context.Context, arg JoinDayPlanAndDayPlanMovesAndMovesParams) ([]JoinDayPlanAndDayPlanMovesAndMovesRow, error) {
	rows, err := q.db.QueryContext(ctx, joinDayPlanAndDayPlanMovesAndMoves, arg.UserID, arg.PlanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JoinDayPlanAndDayPlanMovesAndMovesRow{}
	for rows.Next() {
		var i JoinDayPlanAndDayPlanMovesAndMovesRow
		if err := rows.Scan(
			&i.DayPlanMoveID,
			&i.DayPlanID,
			&i.PlanID,
			&i.Day,
			&i.MoveID,
			&i.MoveName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCurrentWeekCompletedExercises = `-- name: SelectCurrentWeekCompletedExercises :many
SELECT DISTINCT moves.move_name
FROM
    plan_records JOIN moves ON plan_records.move_id = moves.move_id
WHERE user_id = $1
    AND day_plan_id = $2
    AND week = $3
`

type SelectCurrentWeekCompletedExercisesParams struct {
	UserID    int64 `json:"user_id"`
	DayPlanID int64 `json:"day_plan_id"`
	Week      int32 `json:"week"`
}

func (q *Queries) SelectCurrentWeekCompletedExercises(ctx context.Context, arg SelectCurrentWeekCompletedExercisesParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectCurrentWeekCompletedExercises, arg.UserID, arg.DayPlanID, arg.Week)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var move_name string
		if err := rows.Scan(&move_name); err != nil {
			return nil, err
		}
		items = append(items, move_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectDayFromPlan = `-- name: SelectDayFromPlan :one
SELECT days
FROM plans
`

func (q *Queries) SelectDayFromPlan(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, selectDayFromPlan)
	var days int32
	err := row.Scan(&days)
	return days, err
}

const selectDayPlanMovesStartWorkout = `-- name: SelectDayPlanMovesStartWorkout :many
SELECT day_plan_moves.day_plan_move_id,
    day_plan_moves.day_plan_id,
    day_plan_moves.plan_id,
    day,
    day_plan_moves.move_id,
    move_name
FROM day_plan_moves
    INNER JOIN day_plans ON day_plan_moves.day_plan_id = day_plans.day_plan_id
    INNER JOIN moves ON day_plan_moves.move_id = moves.move_id
WHERE day_plan_moves.user_id = $1
    AND day_plan_moves.day_plan_id = $2
ORDER BY day_plan_moves.day_plan_move_id
`

type SelectDayPlanMovesStartWorkoutParams struct {
	UserID    int64 `json:"user_id"`
	DayPlanID int64 `json:"day_plan_id"`
}

type SelectDayPlanMovesStartWorkoutRow struct {
	DayPlanMoveID int64  `json:"day_plan_move_id"`
	DayPlanID     int64  `json:"day_plan_id"`
	PlanID        int64  `json:"plan_id"`
	Day           int32  `json:"day"`
	MoveID        int64  `json:"move_id"`
	MoveName      string `json:"move_name"`
}

func (q *Queries) SelectDayPlanMovesStartWorkout(ctx context.Context, arg SelectDayPlanMovesStartWorkoutParams) ([]SelectDayPlanMovesStartWorkoutRow, error) {
	rows, err := q.db.QueryContext(ctx, selectDayPlanMovesStartWorkout, arg.UserID, arg.DayPlanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectDayPlanMovesStartWorkoutRow{}
	for rows.Next() {
		var i SelectDayPlanMovesStartWorkoutRow
		if err := rows.Scan(
			&i.DayPlanMoveID,
			&i.DayPlanID,
			&i.PlanID,
			&i.Day,
			&i.MoveID,
			&i.MoveName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectNumAvailableWeeksPlanRecords = `-- name: SelectNumAvailableWeeksPlanRecords :one
SELECT COUNT(DISTINCT week)
from plan_records
WHERE user_id = $1
    AND day_plan_id = $2
`

type SelectNumAvailableWeeksPlanRecordsParams struct {
	UserID    int64 `json:"user_id"`
	DayPlanID int64 `json:"day_plan_id"`
}

func (q *Queries) SelectNumAvailableWeeksPlanRecords(ctx context.Context, arg SelectNumAvailableWeeksPlanRecordsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, selectNumAvailableWeeksPlanRecords, arg.UserID, arg.DayPlanID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const selectPlanRecords = `-- name: SelectPlanRecords :many
SELECT plan_records.plan_record_id,
    plan_records.user_id,
    plan_records.day_plan_id,
    plan_records.day_plan_move_id,
    plan_records.move_id,
    plan_records.week,
    plan_records.set_record,
    plan_records.reps,
    plan_records.weight,
    moves.move_name,
    moves.move_type_id
FROM plan_records
    JOIN moves ON plan_records.move_id = moves.move_id
WHERE user_id = $1
    AND day_plan_id = $2
ORDER BY plan_records.plan_record_id,
    plan_records.set_record
`

type SelectPlanRecordsParams struct {
	UserID    int64 `json:"user_id"`
	DayPlanID int64 `json:"day_plan_id"`
}

type SelectPlanRecordsRow struct {
	PlanRecordID  int64  `json:"plan_record_id"`
	UserID        int64  `json:"user_id"`
	DayPlanID     int64  `json:"day_plan_id"`
	DayPlanMoveID int64  `json:"day_plan_move_id"`
	MoveID        int64  `json:"move_id"`
	Week          int32  `json:"week"`
	SetRecord     int32  `json:"set_record"`
	Reps          int32  `json:"reps"`
	Weight        int32  `json:"weight"`
	MoveName      string `json:"move_name"`
	MoveTypeID    int64  `json:"move_type_id"`
}

func (q *Queries) SelectPlanRecords(ctx context.Context, arg SelectPlanRecordsParams) ([]SelectPlanRecordsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectPlanRecords, arg.UserID, arg.DayPlanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectPlanRecordsRow{}
	for rows.Next() {
		var i SelectPlanRecordsRow
		if err := rows.Scan(
			&i.PlanRecordID,
			&i.UserID,
			&i.DayPlanID,
			&i.DayPlanMoveID,
			&i.MoveID,
			&i.Week,
			&i.SetRecord,
			&i.Reps,
			&i.Weight,
			&i.MoveName,
			&i.MoveTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectWeekPlanRecords = `-- name: SelectWeekPlanRecords :many
SELECT plan_records.set_record,
    plan_records.reps,
    plan_records.weight,
    moves.move_name
FROM plan_records
    JOIN moves ON plan_records.move_id = moves.move_id
WHERE user_id = $1
    AND day_plan_id = $2
    AND week = $3
ORDER BY plan_record_id,
    set_record
`

type SelectWeekPlanRecordsParams struct {
	UserID    int64 `json:"user_id"`
	DayPlanID int64 `json:"day_plan_id"`
	Week      int32 `json:"week"`
}

type SelectWeekPlanRecordsRow struct {
	SetRecord int32  `json:"set_record"`
	Reps      int32  `json:"reps"`
	Weight    int32  `json:"weight"`
	MoveName  string `json:"move_name"`
}

func (q *Queries) SelectWeekPlanRecords(ctx context.Context, arg SelectWeekPlanRecordsParams) ([]SelectWeekPlanRecordsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectWeekPlanRecords, arg.UserID, arg.DayPlanID, arg.Week)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectWeekPlanRecordsRow{}
	for rows.Next() {
		var i SelectWeekPlanRecordsRow
		if err := rows.Scan(
			&i.SetRecord,
			&i.Reps,
			&i.Weight,
			&i.MoveName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlanRecord = `-- name: UpdatePlanRecord :one
UPDATE plan_records
SET reps = $1,
    weight = $2
WHERE user_id = $3
    AND plan_record_id = $4
RETURNING plan_record_id, user_id, day_plan_id, day_plan_move_id, move_id, week, set_record, reps, weight
`

type UpdatePlanRecordParams struct {
	Reps         int32 `json:"reps"`
	Weight       int32 `json:"weight"`
	UserID       int64 `json:"user_id"`
	PlanRecordID int64 `json:"plan_record_id"`
}

func (q *Queries) UpdatePlanRecord(ctx context.Context, arg UpdatePlanRecordParams) (PlanRecord, error) {
	row := q.db.QueryRowContext(ctx, updatePlanRecord,
		arg.Reps,
		arg.Weight,
		arg.UserID,
		arg.PlanRecordID,
	)
	var i PlanRecord
	err := row.Scan(
		&i.PlanRecordID,
		&i.UserID,
		&i.DayPlanID,
		&i.DayPlanMoveID,
		&i.MoveID,
		&i.Week,
		&i.SetRecord,
		&i.Reps,
		&i.Weight,
	)
	return i, err
}
