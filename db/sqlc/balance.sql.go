// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: balance.sql

package db

import (
	"context"
	"database/sql"
)

const createBalance = `-- name: CreateBalance :one
INSERT INTO balance (
        budget_id,
        user_id,
        capital,
        eatout,
        entertainment
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING balance_id, budget_id, user_id, capital, eatout, entertainment, total, created_at
`

type CreateBalanceParams struct {
	BudgetID      int64  `json:"budget_id"`
	UserID        int64  `json:"user_id"`
	Capital       string `json:"capital"`
	Eatout        string `json:"eatout"`
	Entertainment string `json:"entertainment"`
}

func (q *Queries) CreateBalance(ctx context.Context, arg CreateBalanceParams) (Balance, error) {
	row := q.db.QueryRowContext(ctx, createBalance,
		arg.BudgetID,
		arg.UserID,
		arg.Capital,
		arg.Eatout,
		arg.Entertainment,
	)
	var i Balance
	err := row.Scan(
		&i.BalanceID,
		&i.BudgetID,
		&i.UserID,
		&i.Capital,
		&i.Eatout,
		&i.Entertainment,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const selectBalance = `-- name: SelectBalance :one
SELECT capital,
    eatout,
    entertainment,
    total
FROM balance
WHERE user_id = $1
    AND budget_id = $2
`

type SelectBalanceParams struct {
	UserID   int64 `json:"user_id"`
	BudgetID int64 `json:"budget_id"`
}

type SelectBalanceRow struct {
	Capital       string         `json:"capital"`
	Eatout        string         `json:"eatout"`
	Entertainment string         `json:"entertainment"`
	Total         sql.NullString `json:"total"`
}

func (q *Queries) SelectBalance(ctx context.Context, arg SelectBalanceParams) (SelectBalanceRow, error) {
	row := q.db.QueryRowContext(ctx, selectBalance, arg.UserID, arg.BudgetID)
	var i SelectBalanceRow
	err := row.Scan(
		&i.Capital,
		&i.Eatout,
		&i.Entertainment,
		&i.Total,
	)
	return i, err
}

const selectCapitalBalance = `-- name: SelectCapitalBalance :one
SELECT capital
FROM balance
WHERE user_id = $1
    AND budget_id = $2
`

type SelectCapitalBalanceParams struct {
	UserID   int64 `json:"user_id"`
	BudgetID int64 `json:"budget_id"`
}

func (q *Queries) SelectCapitalBalance(ctx context.Context, arg SelectCapitalBalanceParams) (string, error) {
	row := q.db.QueryRowContext(ctx, selectCapitalBalance, arg.UserID, arg.BudgetID)
	var capital string
	err := row.Scan(&capital)
	return capital, err
}

const selectEatoutBalance = `-- name: SelectEatoutBalance :one
SELECT eatout
FROM balance
WHERE user_id = $1
    AND budget_id = $2
`

type SelectEatoutBalanceParams struct {
	UserID   int64 `json:"user_id"`
	BudgetID int64 `json:"budget_id"`
}

func (q *Queries) SelectEatoutBalance(ctx context.Context, arg SelectEatoutBalanceParams) (string, error) {
	row := q.db.QueryRowContext(ctx, selectEatoutBalance, arg.UserID, arg.BudgetID)
	var eatout string
	err := row.Scan(&eatout)
	return eatout, err
}

const selectEntertainmentBalance = `-- name: SelectEntertainmentBalance :one
SELECT entertainment
FROM balance
WHERE user_id = $1
    AND budget_id = $2
`

type SelectEntertainmentBalanceParams struct {
	UserID   int64 `json:"user_id"`
	BudgetID int64 `json:"budget_id"`
}

func (q *Queries) SelectEntertainmentBalance(ctx context.Context, arg SelectEntertainmentBalanceParams) (string, error) {
	row := q.db.QueryRowContext(ctx, selectEntertainmentBalance, arg.UserID, arg.BudgetID)
	var entertainment string
	err := row.Scan(&entertainment)
	return entertainment, err
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE balance
SET capital = capital + $1,
    eatout = eatout + $2,
    entertainment = entertainment + $3
WHERE user_id = $4
    AND budget_id = $5
RETURNING balance_id, budget_id, user_id, capital, eatout, entertainment, total, created_at
`

type UpdateBalanceParams struct {
	Capital       string `json:"capital"`
	Eatout        string `json:"eatout"`
	Entertainment string `json:"entertainment"`
	UserID        int64  `json:"user_id"`
	BudgetID      int64  `json:"budget_id"`
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (Balance, error) {
	row := q.db.QueryRowContext(ctx, updateBalance,
		arg.Capital,
		arg.Eatout,
		arg.Entertainment,
		arg.UserID,
		arg.BudgetID,
	)
	var i Balance
	err := row.Scan(
		&i.BalanceID,
		&i.BudgetID,
		&i.UserID,
		&i.Capital,
		&i.Eatout,
		&i.Entertainment,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const updateCapitalBalance = `-- name: UpdateCapitalBalance :one
UPDATE balance
SET capital = $1
WHERE user_id = $2
    AND budget_id = $3
RETURNING capital,
    eatout,
    entertainment,
    total
`

type UpdateCapitalBalanceParams struct {
	Capital  string `json:"capital"`
	UserID   int64  `json:"user_id"`
	BudgetID int64  `json:"budget_id"`
}

type UpdateCapitalBalanceRow struct {
	Capital       string         `json:"capital"`
	Eatout        string         `json:"eatout"`
	Entertainment string         `json:"entertainment"`
	Total         sql.NullString `json:"total"`
}

func (q *Queries) UpdateCapitalBalance(ctx context.Context, arg UpdateCapitalBalanceParams) (UpdateCapitalBalanceRow, error) {
	row := q.db.QueryRowContext(ctx, updateCapitalBalance, arg.Capital, arg.UserID, arg.BudgetID)
	var i UpdateCapitalBalanceRow
	err := row.Scan(
		&i.Capital,
		&i.Eatout,
		&i.Entertainment,
		&i.Total,
	)
	return i, err
}

const updateEatoutBalance = `-- name: UpdateEatoutBalance :exec
UPDATE balance
SET eatout = $1
WHERE user_id = $2
    AND budget_id = $3
`

type UpdateEatoutBalanceParams struct {
	Eatout   string `json:"eatout"`
	UserID   int64  `json:"user_id"`
	BudgetID int64  `json:"budget_id"`
}

func (q *Queries) UpdateEatoutBalance(ctx context.Context, arg UpdateEatoutBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateEatoutBalance, arg.Eatout, arg.UserID, arg.BudgetID)
	return err
}

const updateEntertainmentBalance = `-- name: UpdateEntertainmentBalance :one
UPDATE balance
SET entertainment = $1
WHERE user_id = $2
    AND budget_id = $3
RETURNING capital,
    eatout,
    entertainment,
    total
`

type UpdateEntertainmentBalanceParams struct {
	Entertainment string `json:"entertainment"`
	UserID        int64  `json:"user_id"`
	BudgetID      int64  `json:"budget_id"`
}

type UpdateEntertainmentBalanceRow struct {
	Capital       string         `json:"capital"`
	Eatout        string         `json:"eatout"`
	Entertainment string         `json:"entertainment"`
	Total         sql.NullString `json:"total"`
}

func (q *Queries) UpdateEntertainmentBalance(ctx context.Context, arg UpdateEntertainmentBalanceParams) (UpdateEntertainmentBalanceRow, error) {
	row := q.db.QueryRowContext(ctx, updateEntertainmentBalance, arg.Entertainment, arg.UserID, arg.BudgetID)
	var i UpdateEntertainmentBalanceRow
	err := row.Scan(
		&i.Capital,
		&i.Eatout,
		&i.Entertainment,
		&i.Total,
	)
	return i, err
}
