// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: fitness_plans_recorded_time.sql

package db

import (
	"context"
)

const insertRecordedTime = `-- name: InsertRecordedTime :exec
INSERT INTO workout_plans_time (
        user_id,
        day_plan_id,
        week,
        recorded_time_ms
    )
VALUES ($1, $2, $3, $4)
`

type InsertRecordedTimeParams struct {
	UserID         int64 `json:"user_id"`
	DayPlanID      int64 `json:"day_plan_id"`
	Week           int32 `json:"week"`
	RecordedTimeMs int32 `json:"recorded_time_ms"`
}

func (q *Queries) InsertRecordedTime(ctx context.Context, arg InsertRecordedTimeParams) error {
	_, err := q.db.ExecContext(ctx, insertRecordedTime,
		arg.UserID,
		arg.DayPlanID,
		arg.Week,
		arg.RecordedTimeMs,
	)
	return err
}

const selectRecordedTime = `-- name: SelectRecordedTime :one
SELECT recorded_time_ms
FROM workout_plans_time
WHERE user_id = $1
    AND day_plan_id = $2 AND week = $3
`

type SelectRecordedTimeParams struct {
	UserID    int64 `json:"user_id"`
	DayPlanID int64 `json:"day_plan_id"`
	Week      int32 `json:"week"`
}

func (q *Queries) SelectRecordedTime(ctx context.Context, arg SelectRecordedTimeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, selectRecordedTime, arg.UserID, arg.DayPlanID, arg.Week)
	var recorded_time_ms int32
	err := row.Scan(&recorded_time_ms)
	return recorded_time_ms, err
}
