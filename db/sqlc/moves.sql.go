// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: moves.sql

package db

import (
	"context"
)

const addMoveType = `-- name: AddMoveType :exec
INSERT INTO move_types (
    move_type    
)   VALUES (
    $1
)
ON CONFLICT (move_type) DO NOTHING
`

func (q *Queries) AddMoveType(ctx context.Context, moveType string) error {
	_, err := q.db.ExecContext(ctx, addMoveType, moveType)
	return err
}

const addMoves = `-- name: AddMoves :exec
INSERT INTO moves (
    move_name,
    move_type_id
)
VALUES (
    $1,
    $2
)
ON CONFLICT (move_name) DO NOTHING
`

type AddMovesParams struct {
	MoveName   string `json:"move_name"`
	MoveTypeID int64  `json:"move_type_id"`
}

func (q *Queries) AddMoves(ctx context.Context, arg AddMovesParams) error {
	_, err := q.db.ExecContext(ctx, addMoves, arg.MoveName, arg.MoveTypeID)
	return err
}

const fetchMoveId = `-- name: FetchMoveId :one
SELECT move_id, move_name, move_type_id FROM moves
WHERE move_name = $1
`

func (q *Queries) FetchMoveId(ctx context.Context, moveName string) (Move, error) {
	row := q.db.QueryRowContext(ctx, fetchMoveId, moveName)
	var i Move
	err := row.Scan(&i.MoveID, &i.MoveName, &i.MoveTypeID)
	return i, err
}

const fetchMoveName = `-- name: FetchMoveName :one
SELECT move_name FROM moves
WHERE move_id = $1
`

func (q *Queries) FetchMoveName(ctx context.Context, moveID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, fetchMoveName, moveID)
	var move_name string
	err := row.Scan(&move_name)
	return move_name, err
}

const fetchMoveTypeId = `-- name: FetchMoveTypeId :one
SELECT move_type_id, move_type FROM move_types
WHERE move_type = $1
`

func (q *Queries) FetchMoveTypeId(ctx context.Context, moveType string) (MoveType, error) {
	row := q.db.QueryRowContext(ctx, fetchMoveTypeId, moveType)
	var i MoveType
	err := row.Scan(&i.MoveTypeID, &i.MoveType)
	return i, err
}
