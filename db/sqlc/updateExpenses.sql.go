// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: updateExpenses.sql

package db

import (
	"context"
)

const updateCapitalExpenses = `-- name: UpdateCapitalExpenses :one
UPDATE capital_expenses
SET expenses = $1,
    description = $2
WHERE capital_exp_id = $3
    AND user_id = $4
RETURNING capital_exp_id, budget_id, user_id, expenses, description, created_at
`

type UpdateCapitalExpensesParams struct {
	Expenses     string `json:"expenses"`
	Description  string `json:"description"`
	CapitalExpID int64  `json:"capital_exp_id"`
	UserID       int64  `json:"user_id"`
}

func (q *Queries) UpdateCapitalExpenses(ctx context.Context, arg UpdateCapitalExpensesParams) (CapitalExpense, error) {
	row := q.db.QueryRowContext(ctx, updateCapitalExpenses,
		arg.Expenses,
		arg.Description,
		arg.CapitalExpID,
		arg.UserID,
	)
	var i CapitalExpense
	err := row.Scan(
		&i.CapitalExpID,
		&i.BudgetID,
		&i.UserID,
		&i.Expenses,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateEatoutExpenses = `-- name: UpdateEatoutExpenses :one
UPDATE eatout_expenses
SET expenses = $1,
    description = $2
WHERE eatout_exp_id = $3
    AND user_id = $4
RETURNING eatout_exp_id, budget_id, user_id, expenses, description, created_at
`

type UpdateEatoutExpensesParams struct {
	Expenses    string `json:"expenses"`
	Description string `json:"description"`
	EatoutExpID int64  `json:"eatout_exp_id"`
	UserID      int64  `json:"user_id"`
}

func (q *Queries) UpdateEatoutExpenses(ctx context.Context, arg UpdateEatoutExpensesParams) (EatoutExpense, error) {
	row := q.db.QueryRowContext(ctx, updateEatoutExpenses,
		arg.Expenses,
		arg.Description,
		arg.EatoutExpID,
		arg.UserID,
	)
	var i EatoutExpense
	err := row.Scan(
		&i.EatoutExpID,
		&i.BudgetID,
		&i.UserID,
		&i.Expenses,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateEntertainmentExpenses = `-- name: UpdateEntertainmentExpenses :one
UPDATE entertainment_expenses
SET expenses = $1,
    description = $2
WHERE entertainment_exp_id = $3
    AND user_id = $4
RETURNING entertainment_exp_id, budget_id, user_id, expenses, description, created_at
`

type UpdateEntertainmentExpensesParams struct {
	Expenses           string `json:"expenses"`
	Description        string `json:"description"`
	EntertainmentExpID int64  `json:"entertainment_exp_id"`
	UserID             int64  `json:"user_id"`
}

func (q *Queries) UpdateEntertainmentExpenses(ctx context.Context, arg UpdateEntertainmentExpensesParams) (EntertainmentExpense, error) {
	row := q.db.QueryRowContext(ctx, updateEntertainmentExpenses,
		arg.Expenses,
		arg.Description,
		arg.EntertainmentExpID,
		arg.UserID,
	)
	var i EntertainmentExpense
	err := row.Scan(
		&i.EntertainmentExpID,
		&i.BudgetID,
		&i.UserID,
		&i.Expenses,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
